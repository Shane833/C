CFLAGS=-g -O2 -Wall -Wextra -Isrc -DNDEBUG $(OPTFLAGS)
LIBS=-ldl $(OPTLIBS)
PREFIX?=/usr/local

SOURCES=$(wildcard src/**/*.c src/*.c)
# The wildcard function works like the glob, where it will find for a specific pattern
# in the directories provided in the argument and return its result as a list
OBJECTS=$(patsubst %.c,%.o,$(SOURCES))
# The patsubst (Pattern Substitution) is used to replace/substitute one pattern with the another pattern
# This function is defined as : $(patsubst pattern,replacement,text)
# Here the % acts as a wildcard, it will return the list of replaced characters

TEST_SRC=$(wildcard test/*_tests.c)
TESTS=$(patsubst %.c,%,$(TEST_SRC))

TARGET=build/libYOUR_LIBRARY.a
SO_TARGET=$(patsubst %.a,%.so,$(TARGET))

# Also, it is important to remember that the makefiles are read from top to bottom
# so whichever target or rule you specify first will be executed first
# Hence, it is a good practice to declare and define your variables first so that
# they can be used and referenced later in the makefile

# The Target Build
all: $(TARGET) $(SO_TARGET) tests
dev: CFLAGS=-g -Wall -Isrc -Wall -Wextra $(OPTFLAGS)
dev: all

# A typical makefile consists of the following rules
# target : pre-requisites ...
#		recipe
#		...
#		...

# A target is usually the name of a file that is generated by a program; examples of targets
# are executable or object files. A target can also be the name of an action to carry out, such
# as ‘clean’ 

# A prerequisite is a file that is used as input to create the target. A target often depends
# on several files.

# A recipe is an action that make carries out. A recipe may have more than one command,
# either on the same line or each on its own line

# A rule, then, explains how and when to remake certain files which are the targets of
# the particular rule. make carries out the recipe on the prerequisites to create or update
# the target. A rule can also explain how and when to carry out an action

$(TARGET): CFLAGS += -fPIC
$(TARGET): build $(OBJECTS)
	ar rcs $@ $(OBJECTS)
	ranlib $@
$(SO_TARGET): $(TARGET) $(OBJECTS)
	$(CC) -shared -o $@ $(OBJECTS)

# -p flag check if the directory already exists then throws no error
build:
	@mkdir -p build
	@mkdir -p bin

# The Unit Tests
.PHONY: tests
tests: CFLAGS += $(TARGET)
tests: $(TESTS)
	sh ./tests/runtests.sh

# The Cleaner
clean:
	rm -rf build $(OBJECTS) $(TESTS)
	rm -f tests/tests.log
	find . -name "*.gc*" -exec rm {} \;
	rm -rm `find . -name "*.dSYM" - print`

# The Install
install: all
	install -d $(DESTDIR)/$(PREFIX)/lib/
	install $(TARGET) $(DESTDIR)/$(PREFIX)/lib/

# The Checker
check:
	@echo Files with potentially dangerous functions.
	@egrep '[^_.a-zA-Z0-9](str(n?cpy|n?cat|xfrm|n?dup|str|pbrk|tok|_)\
			|stpn?cpy|a?sn?printf|byte_)' $(SOURCES) || true